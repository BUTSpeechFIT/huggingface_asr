#!/usr/bin/bash
#SBATCH --job-name TED
#SBATCH --account OPEN-28-57
# #SBATCH --gpus 1
#SBATCH --partition qgpu_exp
# #SBATCH --nodes 1
# #SBATCH --gpus-per-task=1
#SBATCH --gres=gpu:1
#SBATCH --time 1:00:00
#SBATCH --output=/mnt/proj1/open-28-57/szoke/huggingface_asr/recipes/ebranchformer_czech/datasets_ssl_split/output/ssl.%A.%a.out  # %A is the job ID, %a is the array task ID
#SBATCH --error=/mnt/proj1/open-28-57/szoke/huggingface_asr/recipes/ebranchformer_czech/datasets_ssl_split/output/ssl.%A.%a.err
#SBATCH --array=50-64  # Specify the range of array tasks

#ml Anaconda3/2023.07-2

unset PYTHONPATH;
unset PYTHONHOME;
source /mnt/matylda6/szoke/miniconda3/etc/profile.d/conda.sh
conda activate huggingface_asr

#unset PYTHONPATH
#unset PYTHONHOME
#. /usr/local/share/Anaconda2/bin/activate python3
#conda activate /mnt/matylda6/szoke/CONDA_ENVS/huggingface_asr

WORK_DIR="/mnt/matylda6/szoke/HuggingFace/huggingface_asr"
ENV_DIR="/mnt/matylda6/szoke/miniconda3/envs/huggingface_asr"
RECIPE_DIR="${WORK_DIR}/recipes/ebranchformer_czech"
EXPERIMENT="ebranchformer_czech_small_v1" #wandb, dirname
PROJECT="czech_ssl" #wandb

export HF_HOME="/mnt/matylda6/szoke/CZECH/big-model/huggingface_cache-newjarin" # do not forget to set the HF token in this cache!
export PYTHONPATH="${PYTHONPATH}:${WORK_DIR}/src"
export OMP_NUM_THREADS=64
export WANDB_PROJECT=$PROJECT
export WANDB_RUN_ID="${EXPERIMENT}"
export DATASET_DUMPS="/mnt/scratch/tmp/szoke/huggingface_dumps/"

PORT=8589
export http_proxy=socks5://localhost:$PORT
export https_proxy=socks5://localhost:$PORT
ssh -N -D $PORT pcszoke &
# [1] 37304

# to lock 1 GPU
export $(/mnt/matylda4/kesiraju/bin/gpus 1) || exit 1

#export SLURM_ARRAY_TASK_ID=93

#[ -z "${CONDA_EXE}" ] && echo "Error, missing conda $CONDA_EXE !" && exit 1
#CONDA_BASE=$(${CONDA_EXE} info --base)
#source $CONDA_BASE/etc/profile.d/conda.sh

#conda deactivate
#source activate /mnt/proj1/open-28-57/szoke/CONDA_ENVS/huggingface_asr

#conda deactivate
#conda activate /mnt/proj1/open-28-57/szoke/CONDA_ENVS/huggingface_asr

EXPERIMENT_PATH="${WORK_DIR}/experiments/${EXPERIMENT}"

cd $WORK_DIR





args=(
  # General training arguments
  --output_dir=$EXPERIMENT_PATH
  --per_device_train_batch_size="32"
  --per_device_eval_batch_size="64"
  --dataloader_num_workers="24"
  --num_train_epochs="50"
  --group_by_length="True"
#  --fp16
  --do_train
  --load_best_model_at_end
  --auto_find_batch_size=True

  # Optimizer related arguments
  --optim="adamw_torch"
  --learning_rate="2e-3"
  --warmup_steps="20000"
  --early_stopping_patience="5"
  --weight_decay="1e-6"
  --max_grad_norm="5.0"
  --gradient_accumulation_steps="1"

  # Logging, saving and evaluation related arguments
  --report_to="wandb"
  --logging_steps="10"
  --save_strategy="epoch"
  --evaluation_strategy="epoch"
  --wandb_predictions_to_save=50
  --greater_is_better="False"
  --save_total_limit="5"

  # Data related arguments
    --max_duration_in_seconds="20.0"
    --min_duration_in_seconds="2.0"
    --length_column_name="input_len"
    --remove_unused_columns="False"
    --preprocessing_num_workers="1"
    --datasets_creation_config="${RECIPE_DIR}/datasets_ssl_split/datasets_ssl.json_new_jarin"
#    --datasets_creation_config="${RECIPE_DIR}/datasets_ssl_split/datasets_ssl.json_new_tts_pl"
    --writer_batch_size="100"
    --validation_split=validation
    --dump_prepared_dataset="${DATASET_DUMPS}/jarin/"
#    --validation_slice=5%
#    --cut_validation_from_train
#    --split_long_segments_to_chunks

  # Preprocessing related arguments
  --data_preprocessing_config="${RECIPE_DIR}/data_preprocessing.json"

  # Model related arguments
  --expect_2d_input
  --base_encoder_model="iszoke/ebranchformer_12_256h_2D"
  --feature_extractor_name="Lakoc/log_80mel_extractor_16k"
  --config_overrides="is_causal=True"
)

#torchrun --standalone --nnodes=1 --nproc-per-node=8 src/trainers/train_enc_dec_asr.py "${args[@]}"
python src/trainers/pretrain_wav2vec2.py "${args[@]}" --preprocess_dataset_only
